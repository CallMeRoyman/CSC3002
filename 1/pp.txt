// C++ program for the above algorithm
#include <bits/stdc++.h>
using namespace std;

// Function to find index of max-weight
// vertex from set of unvisited vertices
long findMaxVertex(bool visited[], long weights[],long V)
{

	// Stores the index of max-weight vertex
	// from set of unvisited vertices
	long index = -1;

	// Stores the maximum weight from
	// the set of unvisited vertices
	long maxW = INT_MIN;

	// Iterate over all possible
	// nodes of a graph
	for (long i = 0; i < V; i++) {

		// If the current node is unvisited
		// and weight of current vertex is
		// greater than maxW
		if (visited[i] == false && weights[i] > maxW) {

			// Update maxW
			maxW = weights[i];

			// Update index
			index = i;
		}
	}
	return index;
}

// Utility function to find the maximum
// spanning tree of graph
void prlongMaximumSpanningTree(vector<vector<long> > graph, long parent[],long V)
{

	// Stores total weight of
	// maximum spanning tree
	// of a graph
	long MST = 0;

	// Iterate over all possible nodes
	// of a graph
	for (long i = 1; i < V; i++) {

		// Update MST
		MST += graph[i][parent[i]];
	}

	cout << MST << '\n';
	
}

// Function to find the maximum spanning tree
void maximumSpanningTree(vector<vector<long> > graph,long V)
{

	// visited[i]:Check if vertex i
	// is visited or not
	bool visited[V];

	// weights[i]: Stores maximum weight of
	// graph to connect an edge with i
	long weights[V];

	// parent[i]: Stores the parent node
	// of vertex i
	long parent[V];

	// Initialize weights as -INFINITE,
	// and visited of a node as false
	for (long i = 0; i < V; i++) {
		visited[i] = false;
		weights[i] = INT_MIN;
	}

	// Include 1st vertex in
	// maximum spanning tree
	weights[0] = INT_MAX;
	parent[0] = -1;

	// Search for other (V-1) vertices
	// and build a tree
	for (long i = 0; i < V - 1; i++) {

		// Stores index of max-weight vertex
		// from a set of unvisited vertex
		long maxVertexIndex = findMaxVertex(visited, weights, V);

		// Mark that vertex as visited
		visited[maxVertexIndex] = true;

		// Update adjacent vertices of
		// the current visited vertex
		for (long j = 0; j < V; j++) {

			// If there is an edge between j
			// and current visited vertex and
			// also j is unvisited vertex
			if (graph[j][maxVertexIndex] != 0
				&& visited[j] == false) {

				// If graph[v][x] is
				// greater than weight[v]
				if (graph[j][maxVertexIndex] > weights[j]) {

					// Update weights[j]
					weights[j] = graph[j][maxVertexIndex];

					// Update parent[j]
					parent[j] = maxVertexIndex;
				}
			}
		}
	}

	// Prlong maximum spanning tree
	prlongMaximumSpanningTree(graph, parent, V);
}

// Driver Code
int main()
{
    long N,mod;
    cin >> N >> mod;
    long popu[N];
    vector<long> temp(N,0);
    vector<vector<long> > vec(N,temp);
    for(long i=0;i < N;i++){
        cin >> popu[i];
    }
    for(long i = 0;i < N;i++){
        for(long j = 0;j < N;j++){
        vec [i][j] = popu[i]*popu[j]%mod;
        if(i==j){
            vec[i][j]=0;
        }
        }
    }
	// Function call
	maximumSpanningTree(vec,N);
	return 0;
}